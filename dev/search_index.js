var documenterSearchIndex = {"docs":
[{"location":"#HPGL.jl","page":"API Documentation","title":"HPGL.jl","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Modules = [HPGL]\nPrivate = false","category":"page"},{"location":"#HPGL.micmeter-Tuple{Any}","page":"API Documentation","title":"HPGL.micmeter","text":"micmeter(plotter_port; x_offset=0, y_offset=0, xtick=100, ytick=1000, xmax=10_000,\n         logfile)\n\nContinuously read from the default audio input and send commands to plot the per-buffer microphone level to plotter_port (via plot_commands!).\n\n\n\n\n\n","category":"method"},{"location":"#HPGL.plot_command!-Tuple{Any, Any}","page":"API Documentation","title":"HPGL.plot_command!","text":"plot_command!(dest, command; pen_up_immediately_after_command)\n\nSend single command to plot destination dest, where it will be handled by that destination type's handle_command!.\n\nIf pen_up_immediately_after_command is true, any \"pen down\" or \"pen move while pen down\" commands (PD, PA) will be followed by a \"pen up command\", to prevent pen bleed in situations where commands are sent infrequently to a physical pen plotter.\n\n\n\n\n\n","category":"method"},{"location":"#HPGL.plot_commands!-Tuple{Any, Any}","page":"API Documentation","title":"HPGL.plot_commands!","text":"plot_commands!(destination, commands; rate_limit_duration_sec=0.2,\n               pen_up_immediately_after_command=false, logfile=missing)\n\nSend a series of commandstodestinationvia [plotcommand!](@ref), with a pause ofratelimitdurationsecbetween each command. Iflogfileis not missing, will additionally appendcommandstologfile`.\n\n\n\n\n\n","category":"method"},{"location":"#HPGL.plot_hpgl_file!-Tuple{Any, Any}","page":"API Documentation","title":"HPGL.plot_hpgl_file!","text":"plot_hpgl_file!(destination, commands; rate_limit_duration_sec=0.2,\n               pen_up_immediately_after_command=false)\n\nSend a file of HPGL commandstodestinationvia [plotcommands!](@ref), with a pause ofratelimitdurationsec` between each command.\n\n\n\n\n\n","category":"method"},{"location":"#HPGL.start_plot_repl-Tuple{Any}","page":"API Documentation","title":"HPGL.start_plot_repl","text":"start_plot_repl(destination; pen_up_immediately_after_command=false,\n                logfile=\"plotter_repl_debug_2024-05-14T21:56:14.184.hpgl\")\n\nStart REPL-like environment that prompts for individual commands and then executes them for destination via plot_command!. Additionally logs all commands entered at the REPL to logfile, unless logfile=missing.\n\nIf pen_up_immediately_after_command is false, any \"pen down\" or \"pen move while pen down\" commands (PD, PA) will be followed by a \"pen up command\", to prevent pen bleed in situations where commands are sent infrequently to a physical pen plotter.\n\n\n\n\n\n","category":"method"},{"location":"#Non-exported-functions-and-types","page":"API Documentation","title":"Non-exported functions and types","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Modules = [HPGL]\nPublic = false","category":"page"},{"location":"#HPGL.handle_command!-Tuple{Missing, Any}","page":"API Documentation","title":"HPGL.handle_command!","text":"handle_command!(destination::T, command)\n\nSend command to destination, dispatching on the destination's type T. All destination types supported by this package must implement a handle_command! for that type.\n\n\n\n\n\n","category":"method"}]
}
